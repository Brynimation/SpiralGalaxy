// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
const int THREAD_GROUP_SIZE = 1024;
struct OrbitalProperties
{
    float3 centre;
    float semiMajorAxis;
    float eccentricity;
    float semiMinorAxis;
    float inclination;
    float longitudeOfAscendingNode;
    float angularOffset;
    float orbitalPeriod;
    //Quaternion rotation;
};


struct OrbittingBody
{
    OrbitalProperties orbitalProperties;
    float3 position; 
    float currentPercentage;
    float orbitStartTime;
    float timePassedSinceOrbitStart;
};

//positions of our orbit (okay, we maay need an array of dimensionEllipses I'll be honest)
RWStructuredBuffer<OrbittingBody> _OrbittingBodies;

//current time (used to calculate the percentage a point is about its orbit)
float _DeltaTime;

//Calculated positions of our orbittingBodies
RWStructuredBuffer<float3> _Positions;

float3 EvaluatePositionOnEllipse(float deltaTime, OrbittingBody b)
{
    if(b.timePassedSinceOrbitStart > b.orbitalProperties.orbitalPeriod)
    {
        b.timePassedSinceOrbitStart -=b.orbitalProperties.orbitalPeriod;
    }
    b.timePassedSinceOrbitStart += deltaTime;
    float3 percentageAroundEllipse = b.timePassedSinceOrbitStart / b.orbitalProperties.orbitalPeriod;
    percentageAroundEllipse = clamp(percentageAroundEllipse, 0.0, 1.0);
    float angle = radians(percentageAroundEllipse * 360);
    float3 position = float3(b.orbitalProperties.semiMajorAxis * sin(angle), b.orbitalProperties.semiMinorAxis * cos(angle), 0.0) + b.orbitalProperties.centre;
    //Vector3 orientedPoint = getRotatedPoint(point, Quaternion.Euler(new Vector3(inclination, longituqdeOfAscendingNode, angularOffset)));
    b.position = position;
    return position;
};



[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
  _Positions[id.x] = EvaluatePositionOnEllipse(_DeltaTime, _OrbittingBodies[id.x]);
}

